28.105.148.89
webpack .\src\index.js .\dist\bundle.js
1、计算属性99%是只读的（只有get方法）
var:没有块级作用域(if和for)
ES6中let加入了块级作用域（if和for的块级作用域）
const修饰常量，定义时必须赋值，不允许修改，但是可以改变修饰对象内部的属性
增强字面量
v-on:click="方法名"  语法糖：@click="方法名"
绑定的方法无参数，小括号可以省略
正常情况下，如果函数定义需要参数，但是调用时没有传，默认就传undefined。
vue中，如果函数需要一个参数，写方法名时省略的小括号，这个时候vue会默认将浏览器产生的event事件对象作为实参传入
方法定义时需要自定义参数又需要event对象，若调用时省略小括号，默认将event事件参数传入第一个参数；
此时如果既要传自定义参数，又需要event对象，需要手动传入：$event
stop修饰符：阻止冒泡stopPropagation @click.stop
prevent修饰符：阻止默认事件，@click.prevent
条件渲染：v-if 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回真值时才被渲染。一个 v-else 元素必须跟在一个 v-if 或者 v-else-if 元素后面，否则它将不会被识别。
vue在进行DOM渲染时，出于性能的考虑，会尽可能复用已经存在的元素，而不是重新创建新的元素。重复利用问题的解决，为标签元素加上key。
v-show：当条件为false时为标签元素添加样式：display:none   vue3中v-show不允许在slot和template上使用，需要使用v-if
v-if：当条件满足时才渲染元素
使用：当条件切换频繁时，使用v-show,当只有一次切换时，使用v-if
v-for遍历对象时，一个参数时，参数值为属性对应的value（v-for="value in object"）,当需要获取属性和对应的值键值对时，使用：v-for="(value,key) in object"
官方推荐当在使用v-for进行遍历渲染时，给对应的元素或组件天剑一个属性：key属性

数组相关：
通过索引值修改对应属组值：arr[index]=newValue，此方法为非响应式，不会导致页面的重新渲染；当需要动态改变数组中元素时，可以考虑使用splice方法：splice(index,1,newValue)
数组的常用响应式方法：
push(newValue...)：在数组的最后添加元素（可添加多个）
pop()：删除数组最后一个元素
shift():删除数组中头（第一个）元素
unshift():在属组开头（第一个）添加一个元素
sort():对数组进行排序
reverse():翻转数组
splic(start,num,newValue...):从下标start开始，删除num个元素，并用新value替换（可多个）

过滤器：|

3种for循环：
for(let i=0;i<this.books.length;i++)
for(let i in this.books):i为数组的index
for(let item of this.books):i为数组元素item对象

filter函数，返回值是一个新数组
let newNums=nums.filter(function(n){return true})  简写：num.filter(n =>n < 100)
map函数，返回值是一个新数组
let newNums=nums.map(function(n){return n*2})
reduce函数：对数组中的所有内容进行汇总，或者循环去操作
let total=nums.reduce(function(pre,n){reuturn pre+n},0),函数中第一个参数pre为上一次循环调用时的返回值，n为当前循环的数字元素值，0为pre初始值（第一次循环调用时）

v-model 双向绑定，通常用作表单数据和变量值的双向绑定，当多选时，可以绑定数组
原理：实际为一个语法糖：1、通过v-bind将绑定表单的一个value属性（变量->value）2、通过v-on绑定表单中的input事件，将表单中的内容value的变化，赋值给变量（value->变量）
v-model修饰符：
lazy修饰符：让数据value在失去焦点或者回车时才更新变量值
number修饰符：将value的数据指定为number类型(默认不指定时为string类型)
trim修饰符：去掉前后空格

组件使用步骤：
1、创建组件构造器  
	const c=Vue.extends({template:{}})
2、注册组件
	Vue.component('label',c)
此种方式注册的是全局组件，可以多个Vue实例下使用
局部组件注册方式：
components:{label:c}
子组件中可以有自己的data，但必须是一个函数

父子组件通信
父传子：props 
	1、子组件中定义props   props:{name:{type: String, required: true}}
	2、父组件中通过v-bind传递数据给子组件  <cpn :name="var">
子传父
	1、子组件中定义事件：this.$emit('submit',1)  submit为父组件监听事件名，1为传递参数，可有多个
	2、父组件监听事件  @submit="method(n)"
父组件获取子组件对象
1、父组件中通过this.$children获取，为数组对象，可获取所有的子组件，通过下标获取对应子组件，不推荐使用
2、子组件中添加属性ref='name',然后在父组件中通过this.$refs.name 获取子组件，获取的是一个对象类型，默认是空对象
子组件访问父组件
this.$parent  
访问根组件
this.$root
不推荐使用，这样会影响子组件的独立性

插槽的使用
<slot>标签，可以指定插槽的默认值
具名插槽：
子组件定义时<slot name='aaa'>  使用时：添加属性：slot='aaa'

模块化 引入js文件时加上type='module'
导出：
1、exprot {var1,var2}  或者定义时  export var1=   export var2=
2、导出函数或者类  export function f(){}  
3、导入 import {var1,var2} from 'aaa.js'
4、导入所有对象：improt * as aaa from 'aaa.js' 通过aaa对象获取导出的对象

webpack ：模块打包工具，处理js文件，处理js相关的依赖
npm init  会生成一个package.json的文件
	配置webpack:webpack.config.js文件
	const path=require('path');
	path:path.resolve(__dirname,'dist')
npm run +命令配置方式： 在package.json中scripts中添加
webpack处理css、less等文件（参考官网步骤）
1、安装合适的loader
2、在webpack:webpack.config.js文件的moulde中配置  
webpack-dev-server

npm install -g @vue/cli
npm install -g @vue/cli-init
cli@2命令：
	vue init webpack projectname
eslint  还是false吧
runtime-compiler：
template ->ast -> render -> virtual DOM	->真实DOM
runtime-only
render -> virtual DOM	->真实DOM
render函数：render(h){return h(component)}  参数h为createElement函数
	1、createElement('标签','{标签属性}',['标签内容'])
	2、createElement(组件对象)
	
cli@3命令
	vue create my-project
	
函数定义的3种方式
	const aaa=function(){}
	const aaa={
		bbb(){ }
	}
	const aaa=(参数列表) =>{}  一个参数式，小括号可省，函数体只有一行代码时，可以省略花括号和return
箭头函数中的this指向：向外层作用域，一层层查找this，直到某层作域中定义了this
	function(this)这种定义的函数，函数体中的this指向的是window（因为这种方法的执行都是window.call）
	
后端渲染：比如jsp，页面是在后端经过处理生成html+css的页面由浏览器渲染出来
前端渲染：浏览器请求html+css+js的内容，由浏览器执行js代码，最终结合html+css渲染出来的页面  --前后端分离
在前后端分离的基础上，加上前端路由，逐渐演化成SPA页面：单页面富应用
location.hash

router
npm install vue-router --save
1、导入，调用Vue.use(VueRouter)
2、创建路由实例，传入路由映射配置
3、在Vue实例中挂载路由实例
router-link  router-view
history.pushState  history.replaceState
mode:history
router-link:
	to:指定跳转地址
	tag:指定渲染成什么组件
	replace：不会留下history记录，即history.replaceState
	active-class:路由匹配成功时组件的class名字，可用于修改默认class名字
	
通过代码跳转路由：this.$router.push()  this.$router.replace()
默认路径的写法
动态路由：/: paramName  在路由组件中，通过this.$route.params.paramName 获取路由中的参数
路由懒加载的写法
嵌套路由写法

router的钩子函数（守卫）
全局守卫：
	beforeEach((to,from ,next) =>{ ...;next()})  router中的数据利用meta来定义;需要调用next()方法后, 才能进入下一个钩子
	afterEach 不需要主动调用next()函数.
路由独享守卫
参考：https://router.vuejs.org/zh/guide/advanced/navigation-guards.html
keep-alive  ->activated/deactivated
keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。

style中引入css文件：@import

TabBar实现思路：
	1、TabBar组件，组件中包含一个slot插槽，slot中传入TabBarItem子组件
	2、TabBarItem组件中包含2个插槽，图片和文字
	
new Promise((resolve,reject) =>{  resolve(data) 或者 reject(err) }).then((data)=>{ success},(err)=>{ error })  then方法中方法定义有对应关系，前一个resolve后一个对应reject
	//怎么理解：resolve(data)和reject(err)可以看成是成功或失败时调用的对应的方法，对应方法的定义为：(data)=>{ success} 为成功时的方法，(err)=>{ error } 为失败时的方法，即前面调用，后面定义
当(data)=>{ success return p2},(err)=>{ error return p2}返回了一个Promise对象时，就能链式调用then(f1,f2)).then(f3,f4)...  注意理解，这都是方法定义，方法具体成功时调用还是失败时调用，在Promise对象的方法体中（resolve,reject） 
	
另外一种写法:Promise((resolve,reject)=>{resolve(data) 或者 reject(err)}).then((data)=>{ success}).catch((err)=>{error})
 链式：Promise((resolve,reject)=>{resolve(data) 或者 reject(err)}).then((data)=>{ success}).then((data)=>{ success}).then((data)=>{ success}).catch((err)=>{error})
 
pending:等待状态
fulfill:满足状态
reject:拒绝状态

Promise.all([Promise1...]).then(results =>{console.log(results[0]...}))

axios({url:'',method:'get',params:{}}).then(res => ...)
axios.all([axios(),axios()]).then( (results => { }))
全局配置：
axios.defaults.baseURL	
axios.defaults.timeout
创建axios实例
axios.create({...})